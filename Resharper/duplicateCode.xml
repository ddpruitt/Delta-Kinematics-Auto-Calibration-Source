<?xml version="1.0" encoding="utf-8"?>
<DuplicatesReport ToolsVersion="103.0">
  <Statistics>
    <CodebaseCost>31469</CodebaseCost>
    <TotalDuplicatesCost>3543</TotalDuplicatesCost>
    <TotalFragmentsCost>7086</TotalFragmentsCost>
  </Statistics>
  <Duplicates>
    <Duplicate Cost="887">
      <Fragment>
        <FileName>..\..\..\Documents\GitHub\Delta-Kinematics-Auto-Calibration-Source\WindowsFormsApplication1\Form.CalibrationFunctions.cs</FileName>
        <OffsetRange Start="31659" End="35703"></OffsetRange>
        <LineRange Start="563" End="632"></LineRange>
        <Text>while (k &lt; 100)
                        {
                            //X Alpha Rotation
                            if (ProbeHeight.YOpp &gt; ProbeHeight.ZOpp)
                            {
                                double ZYOppAvg = (ProbeHeight.YOpp - ProbeHeight.ZOpp) / 2;
                                Towers.A = Towers.A + (ZYOppAvg *AlphaRotationPercentage.X);
                                // (0.5/((diff y0 and z0 at X + 0.5)-(diff y0 and z0 at X = 0))) * 2 = 1.75
                                ProbeHeight.YOpp = ProbeHeight.YOpp - ZYOppAvg;
                                ProbeHeight.ZOpp = ProbeHeight.ZOpp + ZYOppAvg;
                            }
                            else if (ProbeHeight.YOpp &lt; ProbeHeight.ZOpp)
                            {
                                double ZYOppAvg = (ProbeHeight.ZOpp - ProbeHeight.YOpp) / 2;

                                Towers.A = Towers.A - (ZYOppAvg *AlphaRotationPercentage.X);
                                ProbeHeight.YOpp = ProbeHeight.YOpp + ZYOppAvg;
                                ProbeHeight.ZOpp = ProbeHeight.ZOpp - ZYOppAvg;
                            }

                            //Y Alpha Rotation
                            if (ProbeHeight.ZOpp &gt; ProbeHeight.XOpp)
                            {
                                double XZOppAvg = (ProbeHeight.ZOpp - ProbeHeight.XOpp) / 2;
                                Towers.B = Towers.B + (XZOppAvg *AlphaRotationPercentage.Y);
                                ProbeHeight.ZOpp = ProbeHeight.ZOpp - XZOppAvg;
                                ProbeHeight.XOpp = ProbeHeight.XOpp + XZOppAvg;
                            }
                            else if (ProbeHeight.ZOpp &lt; ProbeHeight.XOpp)
                            {
                                double XZOppAvg = (ProbeHeight.XOpp - ProbeHeight.ZOpp) / 2;

                                Towers.B = Towers.B - (XZOppAvg *AlphaRotationPercentage.Y);
                                ProbeHeight.ZOpp = ProbeHeight.ZOpp + XZOppAvg;
                                ProbeHeight.XOpp = ProbeHeight.XOpp - XZOppAvg;
                            }
                            //Z Alpha Rotation
                            if (ProbeHeight.XOpp &gt; ProbeHeight.YOpp)
                            {
                                double YXOppAvg = (ProbeHeight.XOpp - ProbeHeight.YOpp) / 2;
                                Towers.C = Towers.C + (YXOppAvg *AlphaRotationPercentage.Z);
                                ProbeHeight.XOpp = ProbeHeight.XOpp - YXOppAvg;
                                ProbeHeight.YOpp = ProbeHeight.YOpp + YXOppAvg;
                            }
                            else if (ProbeHeight.XOpp &lt; ProbeHeight.YOpp)
                            {
                                double YXOppAvg = (ProbeHeight.YOpp - ProbeHeight.XOpp) / 2;

                                Towers.C = Towers.C - (YXOppAvg *AlphaRotationPercentage.Z);
                                ProbeHeight.XOpp = ProbeHeight.XOpp + YXOppAvg;
                                ProbeHeight.YOpp = ProbeHeight.YOpp - YXOppAvg;
                            }

                            //determine if value is close enough
                            double hTow = Math.Max(Math.Max(ProbeHeight.XOpp, ProbeHeight.YOpp), ProbeHeight.ZOpp);
                            double lTow = Math.Min(Math.Min(ProbeHeight.XOpp, ProbeHeight.YOpp), ProbeHeight.ZOpp);
                            double towDiff = hTow - lTow;

                            if (towDiff &lt; accuracy &amp;&amp; towDiff &gt; -accuracy)
                            {
                                k = 100;
                            }
                            else
                            {
                                k++;
                            }
                        }

                        //log
                        LogConsole("ABC:" + Towers.A + " " + Towers.B + " " + Towers.C + "\n");</Text>
      </Fragment>
      <Fragment>
        <FileName>..\..\..\Documents\GitHub\Delta-Kinematics-Auto-Calibration-Source\WindowsFormsApplication1\Form.CalibrationFunctions.cs</FileName>
        <OffsetRange Start="57268" End="61414"></OffsetRange>
        <LineRange Start="1019" End="1087"></LineRange>
        <Text>while (k &lt; 100)
                            {
                                //X Alpha Rotation
                                if (ProbeHeight.YOpp &gt; ProbeHeight.ZOpp)
                                {
                                    double ZYOppAvg = (ProbeHeight.YOpp - ProbeHeight.ZOpp) / 2;
                                    Towers.A = Towers.A + (ZYOppAvg *AlphaRotationPercentage.X);
                                    ProbeHeight.YOpp = ProbeHeight.YOpp - ZYOppAvg;
                                    ProbeHeight.ZOpp = ProbeHeight.ZOpp + ZYOppAvg;
                                }
                                else if (ProbeHeight.YOpp &lt; ProbeHeight.ZOpp)
                                {
                                    double ZYOppAvg = (ProbeHeight.ZOpp - ProbeHeight.YOpp) / 2;

                                    Towers.A = Towers.A - (ZYOppAvg *AlphaRotationPercentage.X);
                                    ProbeHeight.YOpp = ProbeHeight.YOpp + ZYOppAvg;
                                    ProbeHeight.ZOpp = ProbeHeight.ZOpp - ZYOppAvg;
                                }

                                //Y Alpha Rotation
                                if (ProbeHeight.ZOpp &gt; ProbeHeight.XOpp)
                                {
                                    double XZOppAvg = (ProbeHeight.ZOpp - ProbeHeight.XOpp) / 2;
                                    Towers.B = Towers.B + (XZOppAvg *AlphaRotationPercentage.Y);
                                    ProbeHeight.ZOpp = ProbeHeight.ZOpp - XZOppAvg;
                                    ProbeHeight.XOpp = ProbeHeight.XOpp + XZOppAvg;
                                }
                                else if (ProbeHeight.ZOpp &lt; ProbeHeight.XOpp)
                                {
                                    double XZOppAvg = (ProbeHeight.XOpp - ProbeHeight.ZOpp) / 2;

                                    Towers.B = Towers.B - (XZOppAvg *AlphaRotationPercentage.Y);
                                    ProbeHeight.ZOpp = ProbeHeight.ZOpp + XZOppAvg;
                                    ProbeHeight.XOpp = ProbeHeight.XOpp - XZOppAvg;
                                }

                                //Z Alpha Rotation
                                if (ProbeHeight.XOpp &gt; ProbeHeight.YOpp)
                                {
                                    double YXOppAvg = (ProbeHeight.XOpp - ProbeHeight.YOpp) / 2;
                                    Towers.C = Towers.C + (YXOppAvg *AlphaRotationPercentage.Z);
                                    ProbeHeight.XOpp = ProbeHeight.XOpp - YXOppAvg;
                                    ProbeHeight.YOpp = ProbeHeight.YOpp + YXOppAvg;
                                }
                                else if (ProbeHeight.XOpp &lt; ProbeHeight.YOpp)
                                {
                                    double YXOppAvg = (ProbeHeight.YOpp - ProbeHeight.XOpp) / 2;

                                    Towers.C = Towers.C - (YXOppAvg *AlphaRotationPercentage.Z);
                                    ProbeHeight.XOpp = ProbeHeight.XOpp + YXOppAvg;
                                    ProbeHeight.YOpp = ProbeHeight.YOpp - YXOppAvg;
                                }

                                //determine if value is close enough
                                double hTow = Math.Max(Math.Max(ProbeHeight.XOpp, ProbeHeight.YOpp), ProbeHeight.ZOpp);
                                double lTow = Math.Min(Math.Min(ProbeHeight.XOpp, ProbeHeight.YOpp), ProbeHeight.ZOpp);
                                double towDiff = hTow - lTow;

                                if (towDiff &lt; accuracy &amp;&amp; towDiff &gt; -accuracy)
                                {
                                    k = 100;
                                }
                                else
                                {
                                    k++;
                                }
                            }

                            LogConsole("ABC:" + Towers.A + " " + Towers.B + " " + Towers.C + "\n");</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="735">
      <Fragment>
        <FileName>..\..\..\Documents\GitHub\Delta-Kinematics-Auto-Calibration-Source\WindowsFormsApplication1\Form.CalibrationFunctions.cs</FileName>
        <OffsetRange Start="36218" End="39326"></OffsetRange>
        <LineRange Start="643" End="697"></LineRange>
        <Text>int i = 0;
                        while (i &lt; 100)
                        {
                            double XYZOpp = (ProbeHeight.XOpp + ProbeHeight.YOpp + ProbeHeight.ZOpp) / 3;
                            diagonalRod = diagonalRod + (XYZOpp * diagChange);
                            ProbeHeight.X = ProbeHeight.X - towOppDiff * XYZOpp;
                            ProbeHeight.Y = ProbeHeight.Y - towOppDiff * XYZOpp;
                            ProbeHeight.Z = ProbeHeight.Z - towOppDiff * XYZOpp;
                            ProbeHeight.XOpp = ProbeHeight.XOpp - XYZOpp;
                            ProbeHeight.YOpp = ProbeHeight.YOpp - XYZOpp;
                            ProbeHeight.ZOpp = ProbeHeight.ZOpp - XYZOpp;
                            XYZOpp = (ProbeHeight.XOpp + ProbeHeight.YOpp + ProbeHeight.ZOpp) / 3;
                            XYZOpp = CheckZero(XYZOpp);

                            double XYZ = (ProbeHeight.X + ProbeHeight.Y + ProbeHeight.Z) / 3;
                            //hrad
                            HRad = HRad + (XYZ / HRadRatio);

                            if (XYZOpp &gt;= 0)
                            {
                                ProbeHeight.X = ProbeHeight.X - XYZ;
                                ProbeHeight.Y = ProbeHeight.Y - XYZ;
                                ProbeHeight.Z = ProbeHeight.Z - XYZ;
                                ProbeHeight.XOpp = ProbeHeight.XOpp - XYZ;
                                ProbeHeight.YOpp = ProbeHeight.YOpp - XYZ;
                                ProbeHeight.ZOpp = ProbeHeight.ZOpp - XYZ;
                            }
                            else
                            {
                                ProbeHeight.X = ProbeHeight.X + XYZ;
                                ProbeHeight.Y = ProbeHeight.Y + XYZ;
                                ProbeHeight.Z = ProbeHeight.Z + XYZ;
                                ProbeHeight.XOpp = ProbeHeight.XOpp + XYZ;
                                ProbeHeight.YOpp = ProbeHeight.YOpp + XYZ;
                                ProbeHeight.ZOpp = ProbeHeight.ZOpp + XYZ;
                            }

                            ProbeHeight.X = CheckZero(ProbeHeight.X);
                            ProbeHeight.Y = CheckZero(ProbeHeight.Y);
                            ProbeHeight.Z = CheckZero(ProbeHeight.Z);
                            ProbeHeight.XOpp = CheckZero(ProbeHeight.XOpp);
                            ProbeHeight.YOpp = CheckZero(ProbeHeight.YOpp);
                            ProbeHeight.ZOpp = CheckZero(ProbeHeight.ZOpp);

                            //XYZ is zero
                            if (XYZOpp &lt; accuracy &amp;&amp; XYZOpp &gt; -accuracy &amp;&amp; XYZ &lt; accuracy &amp;&amp; XYZ &gt; -accuracy)
                            {
                                i = 100;
                                diagonalRod = CheckZero(diagonalRod);
                            }
                            else
                            {
                                i++;
                            }
                        }</Text>
      </Fragment>
      <Fragment>
        <FileName>..\..\..\Documents\GitHub\Delta-Kinematics-Auto-Calibration-Source\WindowsFormsApplication1\Form.CalibrationFunctions.cs</FileName>
        <OffsetRange Start="64036" End="67344"></OffsetRange>
        <LineRange Start="1131" End="1185"></LineRange>
        <Text>int i = 0;
                            while (i &lt; 100)
                            {
                                double XYZOpp = (ProbeHeight.XOpp + ProbeHeight.YOpp + ProbeHeight.ZOpp) / 3;
                                diagonalRod = diagonalRod + (XYZOpp * diagChange);
                                ProbeHeight.X = ProbeHeight.X - towOppDiff * XYZOpp;
                                ProbeHeight.Y = ProbeHeight.Y - towOppDiff * XYZOpp;
                                ProbeHeight.Z = ProbeHeight.Z - towOppDiff * XYZOpp;
                                ProbeHeight.XOpp = ProbeHeight.XOpp - XYZOpp;
                                ProbeHeight.YOpp = ProbeHeight.YOpp - XYZOpp;
                                ProbeHeight.ZOpp = ProbeHeight.ZOpp - XYZOpp;
                                XYZOpp = (ProbeHeight.XOpp + ProbeHeight.YOpp + ProbeHeight.ZOpp) / 3;
                                XYZOpp = CheckZero(XYZOpp);

                                double XYZ = (ProbeHeight.X + ProbeHeight.Y + ProbeHeight.Z) / 3;
                                //hrad
                                HRad = HRad + (XYZ / HRadRatio);

                                if (XYZOpp &gt;= 0)
                                {
                                    ProbeHeight.X = ProbeHeight.X - XYZ;
                                    ProbeHeight.Y = ProbeHeight.Y - XYZ;
                                    ProbeHeight.Z = ProbeHeight.Z - XYZ;
                                    ProbeHeight.XOpp = ProbeHeight.XOpp - XYZ;
                                    ProbeHeight.YOpp = ProbeHeight.YOpp - XYZ;
                                    ProbeHeight.ZOpp = ProbeHeight.ZOpp - XYZ;
                                }
                                else
                                {
                                    ProbeHeight.X = ProbeHeight.X + XYZ;
                                    ProbeHeight.Y = ProbeHeight.Y + XYZ;
                                    ProbeHeight.Z = ProbeHeight.Z + XYZ;
                                    ProbeHeight.XOpp = ProbeHeight.XOpp + XYZ;
                                    ProbeHeight.YOpp = ProbeHeight.YOpp + XYZ;
                                    ProbeHeight.ZOpp = ProbeHeight.ZOpp + XYZ;
                                }

                                ProbeHeight.X = CheckZero(ProbeHeight.X);
                                ProbeHeight.Y = CheckZero(ProbeHeight.Y);
                                ProbeHeight.Z = CheckZero(ProbeHeight.Z);
                                ProbeHeight.XOpp = CheckZero(ProbeHeight.XOpp);
                                ProbeHeight.YOpp = CheckZero(ProbeHeight.YOpp);
                                ProbeHeight.ZOpp = CheckZero(ProbeHeight.ZOpp);

                                //XYZ is zero
                                if (XYZOpp &lt; accuracy &amp;&amp; XYZOpp &gt; -accuracy &amp;&amp; XYZ &lt; accuracy &amp;&amp; XYZ &gt; -accuracy)
                                {
                                    i = 100;
                                    diagonalRod = CheckZero(diagonalRod);
                                }
                                else
                                {
                                    i++;
                                }
                            }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="253">
      <Fragment>
        <FileName>..\..\..\Documents\GitHub\Delta-Kinematics-Auto-Calibration-Source\WindowsFormsApplication1\Form.CalibrationFunctions.cs</FileName>
        <OffsetRange Start="10184" End="11002"></OffsetRange>
        <LineRange Start="244" End="258"></LineRange>
        <Text>ProbeHeight.X = ProbeHeight.X - HRadSA;
                    ProbeHeight.Y = ProbeHeight.Y - HRadSA;
                    ProbeHeight.Z = ProbeHeight.Z - HRadSA;
                    ProbeHeight.XOpp = ProbeHeight.XOpp - HRadSA;
                    ProbeHeight.YOpp = ProbeHeight.YOpp - HRadSA;
                    ProbeHeight.ZOpp = ProbeHeight.ZOpp - HRadSA;

                    ProbeHeight.X = CheckZero(ProbeHeight.X);
                    ProbeHeight.Y = CheckZero(ProbeHeight.Y);
                    ProbeHeight.Z = CheckZero(ProbeHeight.Z);
                    ProbeHeight.XOpp = CheckZero(ProbeHeight.XOpp);
                    ProbeHeight.YOpp = CheckZero(ProbeHeight.YOpp);
                    ProbeHeight.ZOpp = CheckZero(ProbeHeight.ZOpp);

                    LogConsole("HRad:" + HRad + "\n");</Text>
      </Fragment>
      <Fragment>
        <FileName>..\..\..\Documents\GitHub\Delta-Kinematics-Auto-Calibration-Source\WindowsFormsApplication1\Form.CalibrationFunctions.cs</FileName>
        <OffsetRange Start="45499" End="46413"></OffsetRange>
        <LineRange Start="811" End="825"></LineRange>
        <Text>ProbeHeight.X = ProbeHeight.X - HRadSA;
                            ProbeHeight.Y = ProbeHeight.Y - HRadSA;
                            ProbeHeight.Z = ProbeHeight.Z - HRadSA;
                            ProbeHeight.XOpp = ProbeHeight.XOpp - HRadSA;
                            ProbeHeight.YOpp = ProbeHeight.YOpp - HRadSA;
                            ProbeHeight.ZOpp = ProbeHeight.ZOpp - HRadSA;

                            ProbeHeight.X = CheckZero(ProbeHeight.X);
                            ProbeHeight.Y = CheckZero(ProbeHeight.Y);
                            ProbeHeight.Z = CheckZero(ProbeHeight.Z);
                            ProbeHeight.XOpp = CheckZero(ProbeHeight.XOpp);
                            ProbeHeight.YOpp = CheckZero(ProbeHeight.YOpp);
                            ProbeHeight.ZOpp = CheckZero(ProbeHeight.ZOpp);

                            LogConsole("HRad:" + HRad + "\n");</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="211">
      <Fragment>
        <FileName>..\..\..\Documents\GitHub\Delta-Kinematics-Auto-Calibration-Source\WindowsFormsApplication1\Form.CalibrationFunctions.cs</FileName>
        <OffsetRange Start="15014" End="15923"></OffsetRange>
        <LineRange Start="325" End="335"></LineRange>
        <Text>{
                            //if x is positive
                            Offset.X = Offset.X + Temp2ProbeHeight.X * stepsPerMM *Offset.XCorrection;

                            Temp2ProbeHeight.XOpp = Temp2ProbeHeight.XOpp + (Temp2ProbeHeight.X *OffsetPercent.xxOppPerc); //0.5
                            Temp2ProbeHeight.Z = Temp2ProbeHeight.Z + (Temp2ProbeHeight.X *OffsetPercent.xzPerc); //0.25
                            Temp2ProbeHeight.Y = Temp2ProbeHeight.Y + (Temp2ProbeHeight.X *OffsetPercent.xyPerc); //0.25
                            Temp2ProbeHeight.ZOpp = Temp2ProbeHeight.ZOpp - (Temp2ProbeHeight.X *OffsetPercent.xzOppPerc); //0.25
                            Temp2ProbeHeight.YOpp = Temp2ProbeHeight.YOpp - (Temp2ProbeHeight.X *OffsetPercent.xyOppPerc); //0.25
                            Temp2ProbeHeight.X = Temp2ProbeHeight.X - Temp2ProbeHeight.X;
                        }</Text>
      </Fragment>
      <Fragment>
        <FileName>..\..\..\Documents\GitHub\Delta-Kinematics-Auto-Calibration-Source\WindowsFormsApplication1\Form.CalibrationFunctions.cs</FileName>
        <OffsetRange Start="16022" End="16952"></OffsetRange>
        <LineRange Start="337" End="347"></LineRange>
        <Text>{
                            //if x is negative and can be decreased
                            Offset.X = Offset.X + Temp2ProbeHeight.X * stepsPerMM *Offset.XCorrection;

                            Temp2ProbeHeight.XOpp = Temp2ProbeHeight.XOpp + (Temp2ProbeHeight.X *OffsetPercent.xxOppPerc); //0.5
                            Temp2ProbeHeight.Z = Temp2ProbeHeight.Z + (Temp2ProbeHeight.X *OffsetPercent.xzPerc); //0.25
                            Temp2ProbeHeight.Y = Temp2ProbeHeight.Y + (Temp2ProbeHeight.X *OffsetPercent.xyPerc); //0.25
                            Temp2ProbeHeight.ZOpp = Temp2ProbeHeight.ZOpp - (Temp2ProbeHeight.X *OffsetPercent.xzOppPerc); //0.25
                            Temp2ProbeHeight.YOpp = Temp2ProbeHeight.YOpp - (Temp2ProbeHeight.X *OffsetPercent.xyOppPerc); //0.25
                            Temp2ProbeHeight.X = Temp2ProbeHeight.X - Temp2ProbeHeight.X;
                        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="211">
      <Fragment>
        <FileName>..\..\..\Documents\GitHub\Delta-Kinematics-Auto-Calibration-Source\WindowsFormsApplication1\Form.CalibrationFunctions.cs</FileName>
        <OffsetRange Start="18961" End="19788"></OffsetRange>
        <LineRange Start="373" End="382"></LineRange>
        <Text>{
                            Offset.Y = Offset.Y + Temp2ProbeHeight.Y * stepsPerMM *Offset.YCorrection;

                            Temp2ProbeHeight.YOpp = Temp2ProbeHeight.YOpp + (Temp2ProbeHeight.Y *OffsetPercent.yyOppPerc);
                            Temp2ProbeHeight.X = Temp2ProbeHeight.X + (Temp2ProbeHeight.Y *OffsetPercent.yxPerc);
                            Temp2ProbeHeight.Z = Temp2ProbeHeight.Z + (Temp2ProbeHeight.Y *OffsetPercent.yxPerc);
                            Temp2ProbeHeight.XOpp = Temp2ProbeHeight.XOpp - (Temp2ProbeHeight.Y *OffsetPercent.yxOppPerc);
                            Temp2ProbeHeight.ZOpp = Temp2ProbeHeight.ZOpp - (Temp2ProbeHeight.Y *OffsetPercent.yxOppPerc);
                            Temp2ProbeHeight.Y = Temp2ProbeHeight.Y - Temp2ProbeHeight.Y;
                        }</Text>
      </Fragment>
      <Fragment>
        <FileName>..\..\..\Documents\GitHub\Delta-Kinematics-Auto-Calibration-Source\WindowsFormsApplication1\Form.CalibrationFunctions.cs</FileName>
        <OffsetRange Start="19887" End="20714"></OffsetRange>
        <LineRange Start="384" End="393"></LineRange>
        <Text>{
                            Offset.Y = Offset.Y + Temp2ProbeHeight.Y * stepsPerMM *Offset.YCorrection;

                            Temp2ProbeHeight.YOpp = Temp2ProbeHeight.YOpp + (Temp2ProbeHeight.Y *OffsetPercent.yyOppPerc);
                            Temp2ProbeHeight.X = Temp2ProbeHeight.X + (Temp2ProbeHeight.Y *OffsetPercent.yxPerc);
                            Temp2ProbeHeight.Z = Temp2ProbeHeight.Z + (Temp2ProbeHeight.Y *OffsetPercent.yxPerc);
                            Temp2ProbeHeight.XOpp = Temp2ProbeHeight.XOpp - (Temp2ProbeHeight.Y *OffsetPercent.yxOppPerc);
                            Temp2ProbeHeight.ZOpp = Temp2ProbeHeight.ZOpp - (Temp2ProbeHeight.Y *OffsetPercent.yxOppPerc);
                            Temp2ProbeHeight.Y = Temp2ProbeHeight.Y - Temp2ProbeHeight.Y;
                        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="211">
      <Fragment>
        <FileName>..\..\..\Documents\GitHub\Delta-Kinematics-Auto-Calibration-Source\WindowsFormsApplication1\Form.CalibrationFunctions.cs</FileName>
        <OffsetRange Start="22704" End="23531"></OffsetRange>
        <LineRange Start="418" End="427"></LineRange>
        <Text>{
                            Offset.Z = Offset.Z + Temp2ProbeHeight.Z * stepsPerMM *Offset.ZCorrection;

                            Temp2ProbeHeight.ZOpp = Temp2ProbeHeight.ZOpp + (Temp2ProbeHeight.Z *OffsetPercent.zzOppPerc);
                            Temp2ProbeHeight.X = Temp2ProbeHeight.X + (Temp2ProbeHeight.Z *OffsetPercent.zxPerc);
                            Temp2ProbeHeight.Y = Temp2ProbeHeight.Y + (Temp2ProbeHeight.Z *OffsetPercent.zyPerc);
                            Temp2ProbeHeight.XOpp = Temp2ProbeHeight.XOpp - (Temp2ProbeHeight.Z *OffsetPercent.yxOppPerc);
                            Temp2ProbeHeight.YOpp = Temp2ProbeHeight.YOpp - (Temp2ProbeHeight.Z *OffsetPercent.zyOppPerc);
                            Temp2ProbeHeight.Z = Temp2ProbeHeight.Z - Temp2ProbeHeight.Z;
                        }</Text>
      </Fragment>
      <Fragment>
        <FileName>..\..\..\Documents\GitHub\Delta-Kinematics-Auto-Calibration-Source\WindowsFormsApplication1\Form.CalibrationFunctions.cs</FileName>
        <OffsetRange Start="23630" End="24457"></OffsetRange>
        <LineRange Start="429" End="438"></LineRange>
        <Text>{
                            Offset.Z = Offset.Z + Temp2ProbeHeight.Z * stepsPerMM *Offset.ZCorrection;

                            Temp2ProbeHeight.ZOpp = Temp2ProbeHeight.ZOpp + (Temp2ProbeHeight.Z *OffsetPercent.zzOppPerc);
                            Temp2ProbeHeight.X = Temp2ProbeHeight.X + (Temp2ProbeHeight.Z *OffsetPercent.zxPerc);
                            Temp2ProbeHeight.Y = Temp2ProbeHeight.Y + (Temp2ProbeHeight.Z *OffsetPercent.zyPerc);
                            Temp2ProbeHeight.XOpp = Temp2ProbeHeight.XOpp - (Temp2ProbeHeight.Z *OffsetPercent.yxOppPerc);
                            Temp2ProbeHeight.YOpp = Temp2ProbeHeight.YOpp - (Temp2ProbeHeight.Z *OffsetPercent.zyOppPerc);
                            Temp2ProbeHeight.Z = Temp2ProbeHeight.Z - Temp2ProbeHeight.Z;
                        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="195">
      <Fragment>
        <FileName>..\..\..\Documents\GitHub\Delta-Kinematics-Auto-Calibration-Source\WindowsFormsApplication1\Form.SerialComs.cs</FileName>
        <OffsetRange Start="4065" End="4805"></OffsetRange>
        <LineRange Start="88" End="96"></LineRange>
        <Text>_serialPort.WriteLine("G1 Z" + probingHeight.ToString() + " X-" +
                                                      valueXYLarge.ToString() + " Y-" + valueXYSmall.ToString());
                                Thread.Sleep(pauseTimeSet);
                                _serialPort.WriteLine("G1 Z" + probingHeight.ToString() + " X0 Y0");
                                Thread.Sleep(pauseTimeSet);
                                _serialPort.WriteLine("G1 Z" + probingHeight.ToString() + " X" + valueXYLarge.ToString() +
                                                      " Y" + valueXYSmall.ToString());
                                Thread.Sleep(pauseTimeSet);
                                _serialPort.WriteLine("G30");</Text>
      </Fragment>
      <Fragment>
        <FileName>..\..\..\Documents\GitHub\Delta-Kinematics-Auto-Calibration-Source\WindowsFormsApplication1\Form.SerialComs.cs</FileName>
        <OffsetRange Start="6466" End="7206"></OffsetRange>
        <LineRange Start="124" End="132"></LineRange>
        <Text>_serialPort.WriteLine("G1 Z" + probingHeight.ToString() + " X" + valueXYLarge.ToString() +
                                                      " Y-" + valueXYSmall.ToString());
                                Thread.Sleep(pauseTimeSet);
                                _serialPort.WriteLine("G1 Z" + probingHeight.ToString() + " X0 Y0");
                                Thread.Sleep(pauseTimeSet);
                                _serialPort.WriteLine("G1 Z" + probingHeight.ToString() + " X-" +
                                                      valueXYLarge.ToString() + " Y" + valueXYSmall.ToString());
                                Thread.Sleep(pauseTimeSet);
                                _serialPort.WriteLine("G30");</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="187">
      <Fragment>
        <FileName>..\..\..\Documents\GitHub\Delta-Kinematics-Auto-Calibration-Source\WindowsFormsApplication1\Form.CalibrationFunctions.cs</FileName>
        <OffsetRange Start="13205" End="13737"></OffsetRange>
        <LineRange Start="291" End="298"></LineRange>
        <Text>LogConsole("Delta Radii Offsets: " + Towers.DA.ToString() + ", " + Towers.DB.ToString() + ", " + Towers.DC.ToString());

                    _serialPort.WriteLine("M206 T3 P913 X" + ToLongString(Towers.DA));
                    Thread.Sleep(pauseTimeSet);
                    _serialPort.WriteLine("M206 T3 P917 X" + ToLongString(Towers.DB));
                    Thread.Sleep(pauseTimeSet);
                    _serialPort.WriteLine("M206 T3 P921 X" + ToLongString(Towers.DC));
                    Thread.Sleep(pauseTimeSet);</Text>
      </Fragment>
      <Fragment>
        <FileName>..\..\..\Documents\GitHub\Delta-Kinematics-Auto-Calibration-Source\WindowsFormsApplication1\Form.CalibrationFunctions.cs</FileName>
        <OffsetRange Start="48286" End="48866"></OffsetRange>
        <LineRange Start="859" End="866"></LineRange>
        <Text>LogConsole("Delta Radii Offsets: " + Towers.DA.ToString() + ", " + Towers.DB.ToString() + ", " + Towers.DC.ToString());

                            _serialPort.WriteLine("M206 T3 P913 X" + ToLongString(Towers.DA));
                            Thread.Sleep(pauseTimeSet);
                            _serialPort.WriteLine("M206 T3 P917 X" + ToLongString(Towers.DB));
                            Thread.Sleep(pauseTimeSet);
                            _serialPort.WriteLine("M206 T3 P921 X" + ToLongString(Towers.DC));
                            Thread.Sleep(pauseTimeSet);</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="135">
      <Fragment>
        <FileName>..\..\..\Documents\GitHub\Delta-Kinematics-Auto-Calibration-Source\DeltaKinematics.Core\Calibration.cs</FileName>
        <OffsetRange Start="902" End="1353"></OffsetRange>
        <LineRange Start="32" End="42"></LineRange>
        <Text>if (comboBoxZMinimumValue == "Z-Probe" &amp;&amp; Iterations.IterationNum == 0)
            {
                zProbeSet = 1;
                Thread.Sleep(pauseTimeSet);
                _serialPort.WriteLine("G28");
                Thread.Sleep(pauseTimeSet);
                _serialPort.WriteLine("G30");

                double heightTime = (zMaxLength / zProbeSpeed) * 1000;
                Thread.Sleep(Convert.ToInt32(heightTime));
            }</Text>
      </Fragment>
      <Fragment>
        <FileName>..\..\..\Documents\GitHub\Delta-Kinematics-Auto-Calibration-Source\WindowsFormsApplication1\Form.CalibrationFunctions.cs</FileName>
        <OffsetRange Start="6954" End="7405"></OffsetRange>
        <LineRange Start="176" End="186"></LineRange>
        <Text>if (comboBoxZMinimumValue == "Z-Probe" &amp;&amp; Iterations.IterationNum == 0)
            {
                zProbeSet = 1;
                Thread.Sleep(pauseTimeSet);
                _serialPort.WriteLine("G28");
                Thread.Sleep(pauseTimeSet);
                _serialPort.WriteLine("G30");

                double heightTime = (zMaxLength / zProbeSpeed) * 1000;
                Thread.Sleep(Convert.ToInt32(heightTime));
            }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="104">
      <Fragment>
        <FileName>..\..\..\Documents\GitHub\Delta-Kinematics-Auto-Calibration-Source\WindowsFormsApplication1\Form.CalibrationFunctions.cs</FileName>
        <OffsetRange Start="41161" End="41614"></OffsetRange>
        <LineRange Start="732" End="740"></LineRange>
        <Text>LogConsole("Setting B Rotation\n");
                    Thread.Sleep(pauseTimeSet);
                    _serialPort.WriteLine("M206 T3 P909 X" + CheckZero(Towers.C).ToString());
                    LogConsole("Setting C Rotation\n");
                    Thread.Sleep(pauseTimeSet);

                    //rechecks calibration to either restart or finish
                    LogConsole("Checking height-map\n");
                    InitiateCal();</Text>
      </Fragment>
      <Fragment>
        <FileName>..\..\..\Documents\GitHub\Delta-Kinematics-Auto-Calibration-Source\WindowsFormsApplication1\Form.CalibrationFunctions.cs</FileName>
        <OffsetRange Start="62080" End="62509"></OffsetRange>
        <LineRange Start="1096" End="1103"></LineRange>
        <Text>LogConsole("Setting B Rotation\n");
                            Thread.Sleep(pauseTimeSet);
                            _serialPort.WriteLine("M206 T3 P909 X" + CheckZero(Towers.C).ToString());
                            LogConsole("Setting C Rotation\n");
                            Thread.Sleep(pauseTimeSet);

                            LogConsole("Checking height-map\n");
                            InitiateCal();</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="97">
      <Fragment>
        <FileName>..\..\..\Documents\GitHub\Delta-Kinematics-Auto-Calibration-Source\WindowsFormsApplication1\Form.SerialComs.cs</FileName>
        <OffsetRange Start="7867" End="8219"></OffsetRange>
        <LineRange Start="143" End="148"></LineRange>
        <Text>Thread.Sleep(pauseTimeSet);
                                _serialPort.WriteLine("G1 Z" + probingHeight.ToString() + " X0 Y0");
                                Thread.Sleep(pauseTimeSet);

                                //Z axis
                                _serialPort.WriteLine("G1 Z" + probingHeight.ToString() + " Y" + valueZ.ToString());</Text>
      </Fragment>
      <Fragment>
        <FileName>..\..\..\Documents\GitHub\Delta-Kinematics-Auto-Calibration-Source\WindowsFormsApplication1\Form.SerialComs.cs</FileName>
        <OffsetRange Start="8773" End="9081"></OffsetRange>
        <LineRange Start="159" End="162"></LineRange>
        <Text>_serialPort.WriteLine("G1 Z" + probingHeight.ToString() + " Y" + valueZ.ToString());
                                Thread.Sleep(pauseTimeSet);
                                _serialPort.WriteLine("G1 Z" + probingHeight.ToString() + " X0 Y0");
                                Thread.Sleep(pauseTimeSet);</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="84">
      <Fragment>
        <FileName>..\..\..\Documents\GitHub\Delta-Kinematics-Auto-Calibration-Source\WindowsFormsApplication1\Form.CalibrationFunctions.cs</FileName>
        <OffsetRange Start="11442" End="11621"></OffsetRange>
        <LineRange Start="266" End="268"></LineRange>
        <Text>Towers.DA = Towers.DA + ((DASA) / HRadRatio);
                    Towers.DB = Towers.DB + ((DBSA) / HRadRatio);
                    Towers.DC = Towers.DC + ((DCSA) / HRadRatio);</Text>
      </Fragment>
      <Fragment>
        <FileName>..\..\..\Documents\GitHub\Delta-Kinematics-Auto-Calibration-Source\WindowsFormsApplication1\Form.CalibrationFunctions.cs</FileName>
        <OffsetRange Start="48059" End="48254"></OffsetRange>
        <LineRange Start="855" End="857"></LineRange>
        <Text>Towers.DA = Towers.DA + ((DASA) / HRadRatio);
                            Towers.DB = Towers.DB + ((DBSA) / HRadRatio);
                            Towers.DC = Towers.DC + ((DCSA) / HRadRatio);</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="84">
      <Fragment>
        <FileName>..\..\..\Documents\GitHub\Delta-Kinematics-Auto-Calibration-Source\WindowsFormsApplication1\Form.CalibrationFunctions.cs</FileName>
        <OffsetRange Start="14341" End="14679"></OffsetRange>
        <LineRange Start="312" End="317"></LineRange>
        <Text>Temp2ProbeHeight.X = ProbeHeight.X;
                    Temp2ProbeHeight.XOpp = ProbeHeight.XOpp;
                    Temp2ProbeHeight.Y = ProbeHeight.Y;
                    Temp2ProbeHeight.YOpp = ProbeHeight.YOpp;
                    Temp2ProbeHeight.Z = ProbeHeight.Z;
                    Temp2ProbeHeight.ZOpp = ProbeHeight.ZOpp;</Text>
      </Fragment>
      <Fragment>
        <FileName>..\..\..\Documents\GitHub\Delta-Kinematics-Auto-Calibration-Source\WindowsFormsApplication1\Form.CalibrationFunctions.cs</FileName>
        <OffsetRange Start="27684" End="28062"></OffsetRange>
        <LineRange Start="480" End="485"></LineRange>
        <Text>Temp2ProbeHeight.X = ProbeHeight.X;
                            Temp2ProbeHeight.XOpp = ProbeHeight.XOpp;
                            Temp2ProbeHeight.Y = ProbeHeight.Y;
                            Temp2ProbeHeight.YOpp = ProbeHeight.YOpp;
                            Temp2ProbeHeight.Z = ProbeHeight.Z;
                            Temp2ProbeHeight.ZOpp = ProbeHeight.ZOpp;</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="77">
      <Fragment>
        <FileName>..\..\..\Documents\GitHub\Delta-Kinematics-Auto-Calibration-Source\WindowsFormsApplication1\Form.CalibrationFunctions.cs</FileName>
        <OffsetRange Start="61444" End="61720"></OffsetRange>
        <LineRange Start="1088" End="1090"></LineRange>
        <Text>LogConsole("Heights: X:" + ProbeHeight.X + ", XOpp:" + ProbeHeight.XOpp + ", Y:" +
                                       ProbeHeight.Y + ", YOpp:" + ProbeHeight.YOpp + ", Z:" + ProbeHeight.Z +
                                       ", and ZOpp:" + ProbeHeight.ZOpp + "\n");</Text>
      </Fragment>
      <Fragment>
        <FileName>..\..\..\Documents\GitHub\Delta-Kinematics-Auto-Calibration-Source\WindowsFormsApplication1\Form.CalibrationFunctions.cs</FileName>
        <OffsetRange Start="67455" End="67731"></OffsetRange>
        <LineRange Start="1188" End="1190"></LineRange>
        <Text>LogConsole("Heights: X:" + ProbeHeight.X + ", XOpp:" + ProbeHeight.XOpp + ", Y:" +
                                       ProbeHeight.Y + ", YOpp:" + ProbeHeight.YOpp + ", Z:" + ProbeHeight.Z +
                                       ", and ZOpp:" + ProbeHeight.ZOpp + "\n");</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="72">
      <Fragment>
        <FileName>..\..\..\Documents\GitHub\Delta-Kinematics-Auto-Calibration-Source\WindowsFormsApplication1\Form.CalibrationFunctions.cs</FileName>
        <OffsetRange Start="30607" End="30747"></OffsetRange>
        <LineRange Start="543" End="545"></LineRange>
        <Text>Offset.X = Math.Round(Offset.X);
                    Offset.Y = Math.Round(Offset.Y);
                    Offset.Z = Math.Round(Offset.Z);</Text>
      </Fragment>
      <Fragment>
        <FileName>..\..\..\Documents\GitHub\Delta-Kinematics-Auto-Calibration-Source\WindowsFormsApplication1\Form.CalibrationFunctions.cs</FileName>
        <OffsetRange Start="55225" End="55381"></OffsetRange>
        <LineRange Start="982" End="984"></LineRange>
        <Text>Offset.X = Math.Round(Offset.X);
                            Offset.Y = Math.Round(Offset.Y);
                            Offset.Z = Math.Round(Offset.Z);</Text>
      </Fragment>
    </Duplicate>
  </Duplicates>
</DuplicatesReport>